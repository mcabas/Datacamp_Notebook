######################################################################
######################################################################
######################################################################

# COURSE Supervised Learning in R: Classification_020

######################################################################
######################################################################
######################################################################

######## Chapter 1: k-Nearest Neighbors (kNN) (Module 01-020)
######################################################################

##Classication with nearest neighbors

#Applying nearest neighbors in R
library(class) 
pred <- knn(training_data, testing_data, training_labels)

#---------------------------------------------------------------------

Recognizing a road sign with kNN

After several trips with a human behind the wheel, it is time for the self-driving car to attempt the test course alone.

As it begins to drive away, its camera captures the following image:

Stop Sign

Can you apply a kNN classifier to help the car recognize this sign?

The dataset signs is loaded in your workspace along with the dataframe next_sign, which holds the observation you want to classify.

signs <- read.csv("https://assets.datacamp.com/production/repositories/718/datasets/c274ea22cc3d7e12d7bb9fdc9c2bdabe9ab025f4/knn_traffic_signs.csv")

# Load the 'class' package
library(class)

# Create a vector of labels
sign_types <- signs$sign_type

# Classify the next sign observed
knn(train = signs[-1], test = next_sign, cl = sign_types)

#---------------------------------------------------------------------

Exploring the traffic sign dataset

To better understand how the knn() function was able to classify the stop sign, it may help to examine the training dataset it used.

Each previously observed street sign was divided into a 4x4 grid, and the red, green, and blue level for each of the 16 center pixels is recorded as illustrated here.

Stop Sign Data Encoding

The result is a dataset that records the sign_type as well as 16 x 3 = 48 color properties of each sign.

# Examine the structure of the signs dataset
str(signs)

# Count the number of signs of each type
table(signs$sign_type)

# Check r10's average red level by sign type
aggregate(r10 ~ sign_type, data = signs, mean)

#---------------------------------------------------------------------

Classifying a collection of road signs

Now that the autonomous vehicle has successfully stopped on its own, your team feels confident allowing the car to continue the test course.

The test course includes 59 additional road signs divided into three types:

Stop Sign Speed Limit Sign Pedestrian Sign

At the conclusion of the trial, you are asked to measure the car's overall performance at recognizing these signs.

The class package and the dataset signs are already loaded in your workspace. So is the dataframe test_signs, which holds a set of observations you'll test your model on.

# Use kNN to identify the test road signs
sign_types <- signs$sign_type
signs_pred <- knn(train = signs[-1], test = test_signs[-1], cl = sign_types)

# Create a confusion matrix of the predicted versus actual values
signs_actual <- test_signs$sign_type
table(signs_pred, signs_actual)

# Compute the accuracy
mean(signs_actual == signs_pred)

#---------------------------------------------------------------------

##What about the 'k' in kNN?

#Choosing 'k' neighbors
#Bigger 'k' is not always better
#Choosing 'k'
# it can be the square of training data (?)
# There is no rule, it depends as always

#---------------------------------------------------------------------

Testing other 'k' values

By default, the knn() function in the class package uses only the single nearest neighbor.

Setting a k parameter allows the algorithm to consider additional nearby neighbors. This enlarges the collection of neighbors which will vote on the predicted class.

Compare k values of 1, 7, and 15 to examine the impact on traffic sign classification accuracy.

The class package is already loaded in your workspace along with the datasets signs, signs_test, and sign_types. The object signs_actual holds the true values of the signs.

# Compute the accuracy of the baseline model (default k = 1)
k_1 <- knn(train = signs[-1], test = signs_test[-1], cl = sign_types)
mean(signs_actual == k_1)

# Modify the above to set k = 7
k_7 <- knn(train = signs[-1], test = signs_test[-1], cl = sign_types, k = 7)
mean(signs_actual == k_7)

# Set k = 15 and compare to the above
k_15 <- knn(train = signs[-1], test = signs_test[-1], cl = sign_types, k = 15)
mean(signs_actual == k_15)

#---------------------------------------------------------------------

Seeing how the neighbors voted

When multiple nearest neighbors hold a vote, it can sometimes be useful to examine whether the voters were unanimous or widely separated.

For example, knowing more about the voters' confidence in the classification could allow an autonomous vehicle to use caution in the case there is any chance at all that a stop sign is ahead.

In this exercise, you will learn how to obtain the voting results from the knn() function.

The class package has already been loaded in your workspace along with the datasets signs, sign_types, and signs_test

# Use the prob parameter to get the proportion of votes for the winning class
sign_pred <- knn(train = signs[-1], test = signs_test[-1], cl = sign_types, k = 7, prob = TRUE)

# Get the "prob" attribute from the predicted classes
sign_prob <- attr(sign_pred, "prob")

# Examine the first several predictions
head(sign_pred)

# Examine the proportion of votes for the winning class
head(sign_prob)

#---------------------------------------------------------------------

##Data preparation for kNN 

1. kNN assumes numeric data ----> if caterigorical data ---> dummifie
2. kNN assumes data is normalize ---> if unnormalized data-> normalize

# define a min-max normalize() function 
normalize <- function(x) {
	return((x - min(x)) / (max(x) - min(x)))
} 

#  normalized version of r1 
summary(normalize(signs$r1))
 values from 0 to 1

# un-normalized version of r1 summary(signs$r1)
 values from 0 to 265

######## Chapter 2: Naive Bayes (Module 02-020)
######################################################################

##Understanding Bayesian methods 

#Estimating probability
- The probability of A is denoted P(A)
#Joint probability and independent events
- The joint probability of events A and B is denoted P(A and B)
#Conditional probability and dependent events
- The conditional probability of events A and B is denoted P(A | B)
P(A | B) = P(A and B) / P(B) 

#Making predictions with Naive Bayes

# building a Naive Bayes model
library(naivebayes) 
m <- naive_bayes(location ~ time_of_day, data = location_history)

# making predictions with Naive Bayes 
future_location <- predict(m, future_conditions)

#---------------------------------------------------------------------

Computing probabilities

The where9am data frame contains 91 days (thirteen weeks) worth of data in which Brett recorded his location at 9am each day as well as whether the daytype was a weekend or weekday.

Using the conditional probability formula below, you can compute the probability that Brett is working in the office, given that it is a weekday.

P(A|B)=P(A and B)P(B)

Calculations like these are the basis of the Naive Bayes destination prediction model you'll develop in later exercises.

location <- read.csv("https://assets.datacamp.com/production/repositories/718/datasets/571628c39048df59c40c9dcfba146a2cf7a4a0e3/locations.csv")

# Compute P(A) 
p_A <- nrow(subset(where9am, location == "office")) /nrow(where9am)

# Compute P(B)
p_B <- nrow(subset(where9am, daytype == "weekday")) /nrow(where9am)

# Compute the observed P(A and B)
p_AB <- nrow(subset(where9am, location == "office" & daytype == "weekday")) /nrow(where9am)

#---------------------------------------------------------------------

A simple Naive Bayes location model

The previous exercises showed that the probability that Brett is at work or at home at 9am is highly dependent on whether it is the weekend or a weekday.

To see this finding in action, use the where9am data frame to build a Naive Bayes model on the same data.

You can then use this model to predict the future: where does the model think that Brett will be at 9am on Thursday and at 9am on Saturday?

The dataframe where9am is available in your workspace. This dataset contains information about Brett's location at 9am on different days.

# Load the naivebayes package
library(naivebayes) 

# Build the location prediction model
locmodel <- naive_bayes(location ~ daytype, data = where9am)

# Predict Thursday's 9am location
predict(locmodel, thursday9am)

# Predict Saturdays's 9am location
predict(locmodel, saturday9am)

#---------------------------------------------------------------------

Examining "raw" probabilities

The naivebayes package offers several ways to peek inside a Naive Bayes model.

Typing the name of the model object provides the a priori (overall) and conditional probabilities of each of the model's predictors. If one were so inclined, you might use these for calculating posterior (predicted) probabilities by hand.

Alternatively, R will compute the posterior probabilities for you if the type = "prob" parameter is supplied to the predict() function.

Using these methods, examine how the model's predicted 9am location probability varies from day-to-day. The model locmodel that you fit in the previous exercise is in your workspace.

# The 'naivebayes' package is loaded into the workspace
# and the Naive Bayes 'locmodel' has been built

# Examine the location prediction model
locmodel

# Obtain the predicted probabilities for Thursday at 9am
predict(locmodel, thursday9am , type = "prob")

# Obtain the predicted probabilities for Saturday at 9am
predict(locmodel, saturday9am , type = "prob")

#---------------------------------------------------------------------

##Understanding NB's "naivety" 
#The challenge of multiple predictors
#A "naive" simplication
#An "infrequent" problem ---> The Laplace correction

#---------------------------------------------------------------------

A more sophisticated location model

The locations dataset records Brett's location every hour for 13 weeks. Each hour, the tracking information includes the daytype (weekend or weekday) as well as the hourtype (morning, afternoon, evening, or night).

Using this data, build a more sophisticated model to see how Brett's predicted location not only varies by the day of week but also by the time of day. The dataset locations is already loaded in your workspace.

You can specify additional independent variables in your formula using the + sign (e.g. y ~ x + b).

# The 'naivebayes' package is loaded into the workspace already

# Build a NB model of location
locmodel <- naive_bayes(location ~ daytype + hourtype, data = locations)

# Predict Brett's location on a weekday afternoon
predict(locmodel, weekday_afternoon)

# Predict Brett's location on a weekday evening
predict(locmodel, weekday_evening)

#---------------------------------------------------------------------

Preparing for unforeseen circumstances

While Brett was tracking his location over 13 weeks, he never went into the office during the weekend. Consequently, the joint probability of P(office and weekend) = 0.

Explore how this impacts the predicted probability that Brett may go to work on the weekend in the future. Additionally, you can see how using the Laplace correction will allow a small chance for these types of unforeseen circumstances.

The model locmodel is already in your workspace, along with the dataframe weekend_afternoon.

# The 'naivebayes' package is loaded into the workspace already
# The Naive Bayes location model (locmodel) has already been built

# Observe the predicted probabilities for a weekend afternoon
locmodel
predict(locmodel, weekend_afternoon , type = "prob")
# Build a new model using the Laplace correction
locmodel2 <- naive_bayes(location ~ daytype + hourtype, 
                         data = locations, laplace = 1)

# Observe the new predicted probabilities for a weekend afternoon
predict(locmodel2, weekend_afternoon , type = "prob")

######################################################################
######################################################################
######################################################################

######## Chapter 3: Logistic Regression (Module 03-020)
######################################################################

##Making binary predictions with regression 

#Regression for binary classication
#Introducing logistic regression

#Making predictions with logistic regression

m <- glm(y ~ x1 + x2 + x3,
            data = my_dataset,
            family = "binomial") 

prob <- predict(m, test_dataset,
           type = "response") 

pred <- ifelse(prob > 0.50, 1, 0) 

#---------------------------------------------------------------------

Building simple logistic regression models

The donors dataset contains 93,462 examples of people mailed in a fundraising solicitation for paralyzed military veterans. The donated column is 1 if the person made a donation in response to the mailing and 0 otherwise. This binary outcome will be the dependent variable for the logistic regression model.

The remaining columns are features of the prospective donors that may influence their donation behavior. These are the model's independent variables.

When building a regression model, it is often helpful to form a hypothesis about which independent variables will be predictive of the dependent variable. The bad_address column, which is set to 1 for an invalid mailing address and 0 otherwise, seems like it might reduce the chances of a donation. Similarly, one might suspect that religious interest (interest_religion) and interest in veterans affairs (interest_veterans) would be associated with greater charitable giving.

In this exercise, you will use these three factors to create a simple model of donation behavior. The dataset donors is available in your workspace.

donors <- read.csv("https://assets.datacamp.com/production/repositories/718/datasets/9055dac929e4515286728a2a5dae9f25f0e4eff6/donors.csv")

# Examine the dataset to identify potential independent variables
str(donors)

# Explore the dependent variable
table(donors$donated)

# Build the donation model
donation_model <- glm(donated ~ bad_address + interest_religion + interest_veterans, 
                      data = donors, family = "binomial")

# Summarize the model results
summary(donation_model)

#---------------------------------------------------------------------

Making a binary prediction

In the previous exercise, you used the glm() function to build a logistic regression model of donor behavior. As with many of R's machine learning methods, you can apply the predict() function to the model object to forecast future behavior. By default, predict() outputs predictions in terms of log odds unless type = "response" is specified. This converts the log odds to probabilities.

Because a logistic regression model estimates the probability of the outcome, it is up to you to determine the threshold at which the probability implies action. One must balance the extremes of being too cautious versus being too aggressive. For example, if you were to solicit only the people with a 99% or greater donation probability, you may miss out on many people with lower estimated probabilities that still choose to donate. This balance is particularly important to consider for severely imbalanced outcomes, such as in this dataset where donations are relatively rare.

The dataset donors and the model donation_model are already loaded in your workspace.

# Estimate the donation probability
donors$donation_prob <- predict(donation_model, type = "response")

# Find the donation probability of the average prospect
mean(donors$donated)

# Predict a donation if probability of donation is greater than average (0.0504)
donors$donation_pred <- ifelse(donors$donation_prob > 0.0504, 1, 0)

# Calculate the model's accuracy
mean(donors$donated == donors$donation_pred)

#---------------------------------------------------------------------

##Model performance tradeoffs 
#Understanding ROC curves
#Area under the ROC curve
#Using AUC and ROC appropriately

#---------------------------------------------------------------------

Calculating ROC Curves and AUC

The previous exercises have demonstrated that accuracy is a very misleading measure of model performance on imbalanced datasets. Graphing the model's performance better illustrates the tradeoff between a model that is overly agressive and one that is overly passive.

In this exercise you will create a ROC curve and compute the area under the curve (AUC) to evaluate the logistic regression model of donations you built earlier.

The dataset donors with the column of predicted probabilities, donation_prob ,is already loaded in your workspace.

# Load the pROC package
library(pROC)

# Create a ROC curve
ROC <- roc(donors$donated, donors$donation_prob)

# Plot the ROC curve
plot(ROC, col = "blue")

# Calculate the area under the curve (AUC)
auc(ROC)

#---------------------------------------------------------------------

##Dummy variables, missing data, and interactions 

#Dummy coding categorical data
#create gender factor 
my_data$gender <- factor(my_data$gender,
                         levels = c(0, 1, 2),
                         labels = c("Male", "Female", "Other")) 

#Imputing missing data
-It's like an average of the data to replace missing value to something,
but there are like other ways to create a value that reemplace missin vlue 
and do not affect the trend of data

#Interaction effects
Interactios in two predictor variables can affect the predicted variable


# interaction of obesity and smoking 
glm(disease ~ obesity * smoking,       
	data = health,       
	family = "binomial") 

#---------------------------------------------------------------------

Coding categorical features

Sometimes a dataset contains numeric values that represent a categorical feature.

In the donors dataset, wealth_rating uses numbers to indicate the donor's wealth level:

    0 = Unknown
    1 = Low
    2 = Medium
    3 = High

This exercise illustrates how to prepare this type of categorical feature and examines its impact on a logistic regression model. The dataframe donors is loaded in your workspace.

# Convert the wealth rating to a factor
donors$wealth_levels <- factor(donors$wealth_rating, 
  levels = c(0, 1, 2, 3),
  labels = c("Unknown", "Low", "Medium", "High"))

# Use relevel() to change reference category
donors$wealth_levels <- relevel(donors$wealth_levels, ref = "Medium")
m <- glm(donated ~ wealth_levels,
            data = donors,
            family = "binomial")
# See how our factor coding impacts the model
summary(m)

#---------------------------------------------------------------------

Handling missing data

Some of the prospective donors have missing age data. Unfortunately, R will exclude any cases with NA values when building a regression model.

One workaround is to replace, or impute, the missing values with an estimated value. After doing so, you may also create a missing data indicator to model the possibility that cases with missing data are different in some way from those without.

The dataframe donors is loaded in your workspace.

# Find the average age among non-missing values
summary(donors$age)

# Impute missing age values with the mean age
donors$imputed_age <- ifelse(
  is.na(donors$age), 
  round(mean(donors$age, na.rm = TRUE), 2), 
  donors$age)

# Create missing value indicator for age
donors$missing_age <- ifelse(is.na(donors$age), 1, 0) 

#---------------------------------------------------------------------

Building a more sophisticated model

One of the best predictors of future giving is a history of recent, frequent, and large gifts. In marketing terms, this is known as R/F/M:

    Recency
    Frequency
    Money

Donors that haven't given both recently and frequently may be especially likely to give again; in other words, the combined impact of recency and frequency may be greater than the sum of the separate effects.

Because these predictors together have a greater impact on the dependent variable, their joint effect must be modeled as an interaction. The donors dataset has been loaded for you.

# Build a recency, frequency, and money (RFM) model
rfm_model <- glm(donated ~ money + recency * frequency,       
	data = donors,       
	family = "binomial") 

# Summarize the RFM model to see how the parameters were coded
 summary(rfm_model)

# Compute predicted probabilities for the RFM model
rfm_prob <- predict(rfm_model,
           type = "response") 

# Plot the ROC curve and find AUC for the new model
library(pROC)
ROC <- roc(donors$donated, rfm_prob)
plot(ROC, col = "red")
auc(ROC)

#---------------------------------------------------------------------

#Stepwise regression
-This is divided in two types: 
	- Backward stepwise: It begins with all the variables and start taking out unweigth variables to the model until it finish with final model
	- Forward stepwise: It begins with 0 variables and start adding weigth variables to the model until in finish with final model
#This have a los of dissaventages because it may lead to predictors with no "common sense" to predict the variables of interest and other issues.

#---------------------------------------------------------------------

Building a stepwise regression model

In the absence of subject-matter expertise, stepwise regression can assist with the search for the most important predictors of the outcome of interest.

In this exercise, you will use a forward stepwise approach to add predictors to the model one-by-one until no additional benefit is seen. The donors dataset has been loaded for you.

# Specify a null model with no predictors
null_model <- glm(donated ~ 1, 
  data = donors, 
  family = "binomial")

# Specify the full model using all of the potential predictors
full_model <- glm(donated ~ ., 
  data = donors, 
  family = "binomial")

# Use a forward stepwise algorithm to build a parsimonious model
step_model <- step(null_model, scope = list(lower = null_model, upper = full_model), direction = "forward")

# Estimate the stepwise donation probability
step_prob <- predict(step_model,
  type = "response")

# Plot the ROC of the stepwise model
library(pROC)
ROC <- roc(donors$donated, step_prob)
plot(ROC, col = "red")
auc(ROC)

#---------------------------------------------------------------------
#---------------------------------------------------------------------

######################################################################
######################################################################
######################################################################

######## Chapter 4: Classification Trees (Module 04-020)
######################################################################

##Making decisions with trees 
#A decision tree model
#Decision trees for prediction -----> Divide-and-conquer

#Building trees in R
# building a simple rpart classification tree
library(rpart)
m <- rpart(outcome ~ loan_amount + credit_score, data = loans,
             method = "class") 

# making predictions from an rpart tree
p <- predict(m, test_data, type = "class") 

#---------------------------------------------------------------------

Building a simple decision tree

The loans dataset contains 11,312 randomly-selected people who applied for and later received loans from Lending Club, a US-based peer-to-peer lending company.

You will use a decision tree to try to learn patterns in the outcome of these loans (either repaid or default) based on the requested loan amount and credit score at the time of application.

Then, see how the tree's predictions differ for an applicant with good credit versus one with bad credit.

The dataset loans is already in your workspace.

loans <- read.csv("https://assets.datacamp.com/production/repositories/718/datasets/7805fceacfb205470c0e8800d4ffc37c6944b30c/loans.csv")

# Load the rpart package
library(rpart)

# Build a lending model predicting loan outcome versus loan amount and credit score
loan_model <- rpart(outcome ~ loan_amount + credit_score, data = loans, method = "class", control = rpart.control(cp = 0))

# Make a prediction for someone with good credit
predict(loan_model, good_credit, type = "class")

# Make a prediction for someone with bad credit
predict(loan_model, bad_credit, type = "class")

#---------------------------------------------------------------------

Visualizing classification trees

Due to government rules to prevent illegal discrimination, lenders are required to explain why a loan application was rejected.

The structure of classification trees can be depicted visually, which helps to understand how the tree makes its decisions. The model loan_model that you fit in the last exercise is in your workspace.

# Examine the loan_model object
loan_model

# Load the rpart.plot package
library(rpart.plot)

# Plot the loan_model with default settings
rpart.plot(loan_model)

# Plot the loan_model with customized settings
rpart.plot(loan_model, type = 3, box.palette = c("red", "green"), fallen.leaves = TRUE)

#---------------------------------------------------------------------

##Growing larger classication trees
#Choosing where to split ---> Axis-parallel splits
#The problem of overtting
When you have a overfitted model you start to model noise as "real" outcomes, this results in a fail of the model when facing real information
TO AVOID THIS PROBLEM IS RECOMMENDED TO EVALUATE THE MODEL PERFORMANCE PREVIEW
#Evaluating model performance
To evaluate model performance you build your model with most of your data (75% at random selection), this is going to be your training data, and you evaluate the model with the remaining (25%) as your test data.

#---------------------------------------------------------------------

Creating random test datasets

Before building a more sophisticated lending model, it is important to hold out a portion of the loan data to simulate how well it will predict the outcomes of future loan applicants.

As depicted in the following image, you can use 75% of the observations for training and 25% for testing the model.

The sample() function can be used to generate a random sample of rows to include in the training set. Simply supply it the total number of observations and the number needed for training.

Use the resulting vector of row IDs to subset the loans into training and testing datasets. The dataset loans is loaded in your workspace.

# Determine the number of rows for training
nrow(loans)
nrow(loans) * 0.75
# Create a random sample of row IDs
sample_rows <- sample(nrow(loans), nrow(loans) * 0.75)

# Create the training dataset
loans_train <- loans[sample_rows, ]

# Create the test dataset
loans_test <- loans[-sample_rows, ]

#---------------------------------------------------------------------

Building and evaluating a larger tree

Previously, you created a simple decision tree that used the applicant's credit score and requested loan amount to predict the loan outcome.

Lending Club has additional information about the applicants, such as home ownership status, length of employment, loan purpose, and past bankruptcies, that may be useful for making more accurate predictions.

Using all of the available applicant data, build a more sophisticated lending model using the random training dataset created previously. Then, use this model to make predictions on the testing dataset to estimate the performance of the model on future loan applications.

The rpart package is loaded into the workspace and the loans_train and loans_test datasets have been created.

# Grow a tree using all of the available applicant data
loan_model <- rpart(outcome ~ ., data = loans_train, method = "class", control = rpart.control(cp = 0))

# Make predictions on the test dataset
loans_test$pred <- predict(loan_model, loans_test, type = "class")

# Examine the confusion matrix
table(loans_test$pred, loans_test$outcome)

# Compute the accuracy on the test dataset
mean(loans_test$outcome == loans_test$pred)

#---------------------------------------------------------------------

##Tending to classication trees 
To prevent overffiting our data we can cut the extend of the three at some point, but we have to do it in the correct branch to ensure we don't end up with a smaller or larger three, whe have two strategies to cut or prune the tree: pre-pruning and post-prunning
#Pre-pruning
There are two forms of it: 
- pruning by levels: define a maximum number of depth levels
- minimum observation: define a minimum numer of observation (i.e 10 obs) to split
#Post-pruning
After doing the predictions, it is evaluates with a curve error-rate vs. complexity, and it is recomended to prune in the elbow when error rate did not reduce anymore and complexity keep increasing.

#Pre- and post-pruning with R
# pre-pruning with rpart 
library(rpart) 
prune_control <- rpart.control(maxdepth = 30, minsplit = 20) 

m <- rpart(repaid ~ credit_score + request_amt,
           data = loans,
           method = "class",
           control = prune_control) 

# post-pruning with rpart 
m <- rpart(repaid ~ credit_score + request_amt,
           data = loans,
           method = "class") 
plotcp(m) 
m_pruned <- prune(m, cp = 0.20) 

#---------------------------------------------------------------------

Preventing overgrown trees

The tree grown on the full set of applicant data grew to be extremely large and extremely complex, with hundreds of splits and leaf nodes containing only a handful of applicants. This tree would be almost impossible for a loan officer to interpret.

Using the pre-pruning methods for early stopping, you can prevent a tree from growing too large and complex. See how the rpart control options for maximum tree depth and minimum split count impact the resulting tree.

rpart is loaded.

step 1
loan_model <- rpart(outcome ~ ., data = loans_train, method = "class", control = rpart.control(cp = 0, maxdepth = 6))
loans_test$pred <- predict(loan_model, loans_test, type = "class")
mean(loans_test$pred == loans_test$outcome)

step 2
# Swap maxdepth for a minimum split of 500 
loan_model <- rpart(outcome ~ ., data = loans_train, method = "class", control = rpart.control(cp = 0, minsplit = 500))

# Run this. How does the accuracy change?
loans_test$pred <- predict(loan_model, loans_test, type = "class")
mean(loans_test$pred == loans_test$outcome)

#---------------------------------------------------------------------

Creating a nicely pruned tree

Stopping a tree from growing all the way can lead it to ignore some aspects of the data or miss important trends it may have discovered later.

By using post-pruning, you can intentionally grow a large and complex tree then prune it to be smaller and more efficient later on.

In this exercise, you will have the opportunity to construct a visualization of the tree's performance versus complexity, and use this information to prune the tree to an appropriate level.

The rpart package is loaded into the workspace, along with loans_test and loans_train.

# Grow an overly complex tree
loan_model <-  rpart(outcome ~ ., 
  data = loans_train, 
  method = "class", 
  control = rpart.control(cp = 0))

# Examine the complexity plot
plotcp(loan_model)

# Prune the tree
loan_model_pruned <- prune(loan_model, cp = 0.0014)

# Compute the accuracy of the pruned tree
loans_test$pred <- predict(loan_model_pruned, loans_test, type = "class")
mean(loans_test$pred == loans_test$outcome)

#---------------------------------------------------------------------

#Random forests in R
# building a simple random forest 
library(randomForest) 
m <- randomForest(repaid ~ credit_score + request_amt, data = loans,
             ntree = 500,    # number of trees in the forest
             mtry = sqrt(p)) # number of predictors (p) per tree 

# making predictions from a random forest 
p <- predict(m, test_data) 

#---------------------------------------------------------------------

Building a random forest model

In spite of the fact that a forest can contain hundreds of trees, growing a decision tree forest is perhaps even easier than creating a single highly-tuned tree.

Using the randomForest package, build a random forest and see how it compares to the single trees you built previously.

Keep in mind that due to the random nature of the forest, the results may vary slightly each time you create the forest.

# Load the randomForest package
library(randomForest) 

# Build a random forest model
loan_model <- randomForest(outcome ~ ., data = loans_train,
             ntree = 500)

# Compute the accuracy of the random forest
loans_test$pred <- predict(loan_model, loans_test, type = "class") 
mean(loans_test$pred == loans_test$outcome)

END
